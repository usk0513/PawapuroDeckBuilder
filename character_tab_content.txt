                  <TabsContent value="character">
                    <Form {...form}>
                      <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
                        <FormField
                          control={form.control}
                          name="name"
                          render={({ field }) => (
                            <FormItem>
                              <FormLabel>名前</FormLabel>
                              <FormControl>
                                <Input placeholder="キャラクター名" {...field} />
                              </FormControl>
                              <FormMessage />
                            </FormItem>
                          )}
                        />

                        <FormField
                          control={form.control}
                          name="position"
                          render={({ field }) => (
                            <FormItem>
                              <FormLabel>キャラ種別</FormLabel>
                              <Select
                                onValueChange={field.onChange}
                                defaultValue={field.value}
                                value={field.value}
                              >
                                <FormControl>
                                  <SelectTrigger>
                                    <SelectValue placeholder="キャラ種別を選択" />
                                  </SelectTrigger>
                                </FormControl>
                                <SelectContent>
                                  {positionOptions.map((option) => (
                                    <SelectItem key={option.value} value={option.value}>
                                      {option.label}
                                    </SelectItem>
                                  ))}
                                </SelectContent>
                              </Select>
                              <FormMessage />
                            </FormItem>
                          )}
                        />

                        <div className="space-y-4">
                          <h3 className="text-lg font-medium">得意練習</h3>
                          <FormField
                            control={form.control}
                            name="specialTrainings"
                            render={({ field }) => (
                              <FormItem>
                                <div className="mb-4">
                                  <FormLabel>キャラクターの得意練習を選択してください</FormLabel>
                                  <FormDescription>
                                    複数選択可能です
                                  </FormDescription>
                                </div>
                                <div className="grid grid-cols-2 gap-4">
                                  {specialTrainingOptions.map((option) => (
                                    <FormItem
                                      key={option.value}
                                      className="flex flex-row items-start space-x-3 space-y-0 rounded-md border p-3"
                                    >
                                      <FormControl>
                                        <Checkbox
                                          checked={field.value?.includes(option.value)}
                                          onCheckedChange={(checked) => {
                                            if (checked) {
                                              field.onChange([...(field.value || []), option.value]);
                                            } else {
                                              field.onChange(
                                                field.value?.filter(
                                                  (value) => value !== option.value
                                                )
                                              );
                                            }
                                          }}
                                        />
                                      </FormControl>
                                      <FormLabel className="font-normal cursor-pointer">
                                        {option.label}
                                      </FormLabel>
                                    </FormItem>
                                  ))}
                                </div>
                                <div className="flex flex-wrap gap-1 mt-2">
                                  {field.value && Array.isArray(field.value) && field.value.map((value) => (
                                    <Badge 
                                      key={value as string} 
                                      variant="secondary"
                                      className="text-xs"
                                    >
                                      {value as React.ReactNode}
                                      <button
                                        type="button"
                                        className="ml-1 hover:text-destructive"
                                        onClick={() => {
                                          field.onChange(
                                            field.value?.filter((v) => v !== value)
                                          );
                                        }}
                                      >
                                        ×
                                      </button>
                                    </Badge>
                                  ))}
                                </div>
                                <FormMessage />
                              </FormItem>
                            )}
                          />
                        </div>
                        
                        <div className="space-y-4">
                          <h3 className="text-lg font-medium">イベント発生タイミング</h3>
                          <FormField
                            control={form.control}
                            name="eventTiming"
                            render={({ field }) => (
                              <FormItem className="space-y-3">
                                <FormLabel>イベントの発生タイミングを選択してください</FormLabel>
                                <FormControl>
                                  <RadioGroup
                                    onValueChange={field.onChange}
                                    value={field.value as string | undefined}
                                    className="flex flex-col space-y-1"
                                  >
                                    {eventTimingOptions.map((option) => (
                                      <FormItem key={option.value} className="flex items-center space-x-3 space-y-0">
                                        <FormControl>
                                          <RadioGroupItem value={option.value} />
                                        </FormControl>
                                        <FormLabel className="font-normal cursor-pointer">
                                          {option.label}
                                        </FormLabel>
                                      </FormItem>
                                    ))}
                                  </RadioGroup>
                                </FormControl>
                                <FormDescription>
                                  キャラクターイベントが発生するタイミング（前イベント・後イベント）
                                </FormDescription>
                                <FormMessage />
                              </FormItem>
                            )}
                          />
                        </div>

                        <div className="flex gap-2 justify-end">
                          <Button
                            type="button"
                            variant="outline"
                            onClick={() => {
                              setSelectedCharacter(null);
                              form.reset();
                            }}
                          >
                            キャンセル
                          </Button>
                          <Button type="submit" disabled={isSubmitting}>
                            {isSubmitting && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}
                            更新する
                          </Button>
                          <Button
                            type="button"
                            variant="destructive"
                            disabled={isDeleting}
                            onClick={() => {
                              if (window.confirm("本当に削除しますか？")) {
                                deleteCharacterMutation.mutate(selectedCharacter);
                              }
                            }}
                          >
                            {isDeleting ? (
                              <Loader2 className="h-4 w-4 animate-spin" />
                            ) : (
                              <Trash className="h-4 w-4" />
                            )}
                          </Button>
                        </div>
                      </form>
                    </Form>
                  </TabsContent>
                  
                  <TabsContent value="levelbonus">
                    <div className="space-y-6">
                      <div>
                        <h3 className="text-lg font-medium mb-4">レベルボーナス一括登録</h3>
                        
                        <div className="mb-4">
                          <h4 className="text-sm font-medium mb-2">レアリティフィルタ</h4>
                          <div className="flex space-x-2">
                            <Button 
                              variant={selectedRarity === "" ? "default" : "outline"} 
                              size="sm"
                              onClick={() => setSelectedRarity("")}
                            >
                              すべて
                            </Button>
                            {Object.values(Rarity).map((rarity) => (
                              <Button
                                key={rarity}
                                variant={selectedRarity === rarity ? "default" : "outline"}
                                size="sm"
                                onClick={() => setSelectedRarity(rarity)}
                              >
                                {rarity}
                              </Button>
                            ))}
                          </div>
                        </div>
                        
                        <div className="mb-4">
                          <Button
                            type="button"
                            onClick={submitAllLevelBonuses}
                            disabled={isBatchSubmitting}
                            className="w-full"
                          >
                            {isBatchSubmitting ? (
                              <Loader2 className="h-4 w-4 animate-spin mr-2" />
                            ) : null}
                            全入力項目をまとめて追加
                          </Button>
                        </div>
                        
                        <div className="overflow-x-auto">
                          <table className="w-full border-collapse">
                            <thead>
                              <tr>
                                <th className="border p-2 bg-muted">レベル</th>
                                <th className="border p-2 bg-muted">レア度</th>
                                <th className="border p-2 bg-muted">効果タイプ</th>
                                <th className="border p-2 bg-muted">効果値</th>
                                <th className="border p-2 bg-muted">操作</th>
                              </tr>
                            </thead>
                            <tbody>
                              {[1, 5, 10, 15, 20, 25, 30, 35, 35.5, 37, 40, 42, 45, 50].map((level) => (
                                <tr key={level}>
                                  <td className="border p-2 text-center font-medium">
                                    {level === 35.5 ? (
                                      <div className="inline-flex items-center">
                                        Lv.35 <Badge className="ml-2 bg-blue-500 hover:bg-blue-600">固有ボーナス</Badge>
                                      </div>
                                    ) : level === 35 ? (
                                      <div className="inline-flex items-center">
                                        Lv.35 <Badge className="ml-2 bg-muted">通常ボーナス</Badge>
                                      </div>
                                    ) : (
                                      <div className="inline-flex items-center">
                                        Lv.{level}
                                        {level === 37 && <Badge className="ml-2">SR専用</Badge>}
                                        {(level === 42 || level === 50) && <Badge className="ml-2">PSR専用</Badge>}
                                      </div>
                                    )}
                                  </td>
                                  <td className="border p-2">
                                    {/* 特定のレベルではレアリティを固定する */}
                                    {level === 37 ? (
                                      <div className="text-center text-sm text-muted-foreground">
                                        SR専用
                                      </div>
                                    ) : (level === 42 || level === 50) ? (
                                      <div className="text-center text-sm text-muted-foreground">
                                        PSR専用
                                      </div>
                                    ) : (
                                      <Select
                                        onValueChange={(value) => {
                                          levelBonusForm.setValue("level", level);
                                          levelBonusForm.setValue("rarity", value || undefined);
                                          setLevelBonusRarity({
                                            ...levelBonusRarity,
                                            [level]: value
                                          });
                                        }}
                                        value={levelBonusRarity[level] || "common"}
                                      >
                                        <SelectTrigger>
                                          <SelectValue placeholder="共通" />
                                        </SelectTrigger>
                                        <SelectContent>
                                          <SelectItem value="common">共通</SelectItem>
                                          {Object.values(Rarity).map((rarity) => (
                                            <SelectItem key={rarity} value={rarity}>
                                              {rarity}
                                            </SelectItem>
                                          ))}
                                        </SelectContent>
                                      </Select>
                                    )}
                                  </td>
                                  <td className="border p-2">
                                    <Select
                                      onValueChange={(value) => {
                                        levelBonusForm.setValue("level", level);
                                        levelBonusForm.setValue("effectType", value);
                                        setLevelBonusEffect({
                                          ...levelBonusEffect,
                                          [level]: value
                                        });
                                      }}
                                      value={levelBonusEffect[level] || undefined}
                                    >
                                      <SelectTrigger>
                                        <SelectValue placeholder="効果タイプを選択" />
                                      </SelectTrigger>
                                      <SelectContent>
                                        {/* グループごとにオプションを表示 */}
                                        {Array.from(new Set(bonusEffectTypeOptions.map(option => option.group))).map(group => {
                                          if (!group) return null;
                                          return (
                                            <div key={group}>
                                              {/* グループ名のヘッダー */}
                                              <div className="px-2 py-1.5 text-sm font-semibold bg-muted/50">
                                                {group}
                                              </div>
                                              {/* グループに属するオプションをフィルタリングして表示 */}
                                              {bonusEffectTypeOptions
                                                .filter(option => option.group === group)
                                                .map(option => (
                                                  <SelectItem key={option.value} value={option.value}>
                                                    {option.label}
                                                  </SelectItem>
                                                ))
                                              }
                                            </div>
                                          );
                                        })}
                                      </SelectContent>
                                    </Select>
                                  </td>
                                  <td className="border p-2">
                                    {level === 35.5 ? (
                                      <div className="space-y-2">
                                        <Select
                                          onValueChange={(value) => {
                                            // 選択した固有アイテム名の先頭に+を付ける
                                            const formattedValue = `+${value}`;
                                            
                                            // 画面表示は35.5だが、データベースには35として保存
                                            levelBonusForm.setValue("level", 35);
                                            levelBonusForm.setValue("effectType", BonusEffectType.UNIQUE_ITEM); // 固定効果タイプ
                                            levelBonusForm.setValue("value", formattedValue);
                                            
                                            setLevelBonusEffect((prev) => {
                                              const updated = { ...prev };
                                              updated[level] = BonusEffectType.UNIQUE_ITEM; // 効果タイプを固定
                                              return updated;
                                            });
                                            
                                            setLevelBonusValue((prev) => {
                                              const updated = { ...prev };
                                              updated[level] = formattedValue;
                                              return updated;
                                            });
                                          }}
                                          value={levelBonusValue[level]?.replace(/^\+/, "") || ""}
                                        >
                                          <SelectTrigger>
                                            <SelectValue placeholder="固有アイテムを選択" />
                                          </SelectTrigger>
                                          <SelectContent>
                                            {uniqueBonusItems.map(item => (
                                              <SelectItem key={item.value} value={item.value}>
                                                {item.label}
                                              </SelectItem>
                                            ))}
                                          </SelectContent>
                                        </Select>
                                        <div className="text-xs text-muted-foreground">
                                          固有ボーナス：特殊アイテムでチームに追加効果を与えます
                                        </div>
                                      </div>
                                    ) : level === 35 ? (
                                      <div className="space-y-2">
                                        <Input 
                                          placeholder="通常ボーナス値を入力"
                                          value={levelBonusValue[level] || ""}
                                          onChange={(e) => {
                                            // 通常ボーナスは+をつけない
                                            const value = e.target.value;
                                            
                                            levelBonusForm.setValue("level", level);
                                            levelBonusForm.setValue("value", value);
                                            
                                            setLevelBonusValue((prev) => {
                                              const updated = { ...prev };
                                              updated[level] = value;
                                              return updated;
                                            });
                                          }}
                                        />
                                        <div className="text-xs text-muted-foreground">
                                          通常ボーナス：値をそのまま設定します
                                        </div>
                                      </div>
                                    ) : (
                                      <Input 
                                        placeholder="数値のみ入力"
                                        value={levelBonusValue[level] || ""}
                                        onChange={(e) => {
                                          levelBonusForm.setValue("level", level);
                                          levelBonusForm.setValue("value", e.target.value);
                                          
                                          setLevelBonusValue((prev) => {
                                            const updated = { ...prev };
                                            updated[level] = e.target.value;
                                            return updated;
                                          });
                                        }}
                                      />
                                    )}
                                  </td>
                                  <td className="border p-2">
                                    {/* 初期評価の場合はレアリティ選択を表示 */}
                                    {levelBonusForm.getValues("level") === level && 
                                     levelBonusForm.getValues("effectType") === BonusEffectType.INITIAL_RATING && (
                                      <div className="mb-2">
                                        <Select
                                          onValueChange={(value) => {
                                            levelBonusForm.setValue("rarity", value as string);
                                          }}
                                          value={levelBonusForm.getValues("rarity") || undefined}
                                        >
                                          <SelectTrigger>
                                            <SelectValue placeholder="レアリティを選択" />
                                          </SelectTrigger>
                                          <SelectContent>
                                            <SelectItem value={Rarity.SR}>SR</SelectItem>
                                            <SelectItem value={Rarity.PSR}>PSR</SelectItem>
                                          </SelectContent>
                                        </Select>
                                      </div>
                                    )}
                                    <Button 
                                      type="button" 
                                      size="sm"
                                      disabled={isLevelBonusSubmitting}
                                      onClick={() => {
                                        // level 35.5は内部的には35として保存する
                                        const actualLevel = level === 35.5 ? 35 : level;
                                        levelBonusForm.setValue("level", actualLevel);
                                        levelBonusForm.setValue("description", "");
                                        
                                        // 特定のレベルではレアリティを自動設定
                                        if (actualLevel === 37) {
                                          levelBonusForm.setValue("rarity", Rarity.SR);
                                        } else if (actualLevel === 42 || actualLevel === 50) {
                                          levelBonusForm.setValue("rarity", Rarity.PSR);
                                        }
                                        
                                        // 初期評価の場合はレアリティチェック
                                        if (levelBonusForm.getValues("effectType") === BonusEffectType.INITIAL_RATING && 
                                            !levelBonusForm.getValues("rarity")) {
                                          toast({
                                            title: "入力エラー",
                                            description: "初期評価の場合はレアリティを選択してください",
                                            variant: "destructive",
                                          });
                                          return;
                                        }
                                        
                                        if (levelBonusForm.getValues("effectType") && levelBonusForm.getValues("value")) {
                                          // 効果値にフォーマットを適用しない状態でAPI送信
                                          const formValues = levelBonusForm.getValues();
                                          onLevelBonusSubmit(formValues);
                                          
                                          // フォームリセットは onLevelBonusSubmit 内で行われるため不要
                                        } else {
                                          toast({
                                            title: "入力エラー",
                                            description: "効果タイプと効果値を入力してください",
                                            variant: "destructive",
                                          });
                                        }
                                      }}
                                    >
                                      {isLevelBonusSubmitting && levelBonusForm.getValues("level") === level ? (
                                        <Loader2 className="h-4 w-4 animate-spin mr-1" />
                                      ) : null}
                                      追加
                                    </Button>
                                  </td>
                                </tr>
                              ))}
                            </tbody>
                          </table>
                        </div>
                      </div>
                      
                      <div>
                        <h3 className="text-lg font-medium mb-4">登録済みレベルボーナス</h3>
                        {isLoadingBonuses ? (
                          <div className="flex justify-center my-4">
                            <Loader2 className="h-6 w-6 animate-spin text-primary" />
                          </div>
                        ) : levelBonuses && levelBonuses.length > 0 ? (
                          <div>
                            <div className="mb-4">
                              <h4 className="text-sm font-medium mb-2">表示中のレア度: {selectedRarity || "すべて"}</h4>
                            </div>
                            <div className="space-y-3">
                              {levelBonuses.map((bonus: any) => (
                                <div key={bonus.id} className="flex justify-between items-center p-3 border rounded-md">
                                  <div>
                                    <div className="font-medium flex items-center">
                                      <span>Lv.{bonus.level} - {bonus.effectType}</span>
                                      {bonus.rarity && (
                                        <Badge className="ml-2" variant="outline">
                                          {bonus.rarity}専用
                                        </Badge>
                                      )}
                                    </div>
                                    <div className="text-sm">
                                      {formatEffectValue(bonus.value, bonus.effectType, bonus.level)}
                                      {bonus.description && (
                                        <span className="text-muted-foreground ml-2">
                                          {bonus.description}
                                        </span>
                                      )}
                                      {/* レベル35かつ値が+で始まる場合に固有ボーナスバッジを表示 */}
                                      {bonus.level === 35 && bonus.value.startsWith("+") && (
                                        <Badge className="ml-2 bg-blue-500 hover:bg-blue-600">固有ボーナス</Badge>
                                      )}
                                      {/* レベル35かつ値が+で始まらない場合に通常ボーナスバッジを表示 */}
                                      {bonus.level === 35 && !bonus.value.startsWith("+") && (
                                        <Badge className="ml-2 bg-muted">通常ボーナス</Badge>
                                      )}
                                    </div>
                                  </div>
                                  <Button
                                    variant="ghost"
                                    size="sm"
                                    onClick={() => {
                                      if (window.confirm("このボーナスを削除しますか？")) {
                                        deleteLevelBonusMutation.mutate(bonus.id);
                                      }
                                    }}
                                    disabled={isLevelBonusDeleting}
                                  >
                                    {isLevelBonusDeleting ? (
                                      <Loader2 className="h-4 w-4 animate-spin" />
                                    ) : (
                                      <Trash className="h-4 w-4 text-destructive" />
                                    )}
                                  </Button>
                                </div>
                              ))}
                            </div>
                          </div>
                        ) : (
                          <div className="text-center py-6 text-muted-foreground">
                            レベルボーナスが登録されていません
                          </div>
                        )}
                      </div>
                    </div>
                  </TabsContent>
                  
                  <TabsContent value="awakening">
                    <div className="space-y-6">
                      <div>
                        <h3 className="text-lg font-medium mb-4">覚醒ボーナス登録</h3>
                        
                        <div className="mb-4">
                          <h4 className="text-sm font-medium mb-2">覚醒ボーナス設定</h4>
                          <p className="text-sm text-muted-foreground mb-4">
                            SR（PSR）キャラの覚醒時に適用されるボーナスを設定します。
                            SR: 1回覚醒可能、PSR: 2回覚醒可能。
                          </p>
                          
                          <Form {...awakeningBonusForm}>
                            <form className="space-y-4">
                              <div className="grid grid-cols-2 gap-4">
                                <FormField
                                  control={awakeningBonusForm.control}
                                  name="awakeningType"
                                  render={({ field }) => {
                                    // 初回覚醒ボーナスが既に登録されているか確認
                                    const hasInitialAwakening = awakeningBonuses && awakeningBonuses.some(bonus => bonus.awakeningType === "initial");
                                    
                                    return (
                                      <FormItem>
                                        <FormLabel>覚醒タイプ</FormLabel>
                                        {hasInitialAwakening ? (
                                          // 初回覚醒が登録済みの場合は変更不可の固定表示にする
                                          <div>
                                            <Input 
                                              value="二回目覚醒 (PSRのみ)" 
                                              readOnly 
                                              disabled
                                              className="bg-muted"
                                            />
                                            <FormDescription className="text-amber-500 font-medium">
                                              初回覚醒は既に登録済みです。二回目覚醒のみ追加可能です。
                                            </FormDescription>
                                          </div>
                                        ) : (
                                          // 通常のセレクト表示
                                          <>
                                            <Select
                                              onValueChange={field.onChange}
                                              defaultValue={field.value}
                                              value={field.value}
                                            >
                                              <FormControl>
                                                <SelectTrigger>
                                                  <SelectValue placeholder="覚醒タイプを選択" />
                                                </SelectTrigger>
                                              </FormControl>
                                              <SelectContent>
                                                <SelectItem value="initial">初回覚醒</SelectItem>
                                                <SelectItem value="second">二回目覚醒 (PSRのみ)</SelectItem>
                                              </SelectContent>
                                            </Select>
                                            <FormDescription>
                                              Lv10まで開放したときの効果を入力します
                                            </FormDescription>
                                          </>
                                        )}
                                        <FormMessage />
                                      </FormItem>
                                    );
                                  }}
                                />
                                
                                <FormField
                                  control={awakeningBonusForm.control}
                                  name="effectType"
                                  render={({ field }) => (
                                    <FormItem>
                                      <FormLabel>効果タイプ</FormLabel>
                                      <Select
                                        onValueChange={field.onChange}
                                        defaultValue={field.value as string | undefined}
                                        value={field.value as string | undefined}
                                      >
                                        <FormControl>
                                          <SelectTrigger>
                                            <SelectValue placeholder="効果タイプを選択" />
                                          </SelectTrigger>
                                        </FormControl>
                                        <SelectContent>
                                          {Object.entries(getBonusEffectTypeOptions().reduce((groups, option) => {
                                            if (!groups[option.group || '']) {
                                              groups[option.group || ''] = [];
                                            }
                                            groups[option.group || ''].push(option);
                                            return groups;
                                          }, {} as Record<string, typeof bonusEffectTypeOptions>)).map(([group, options]) => (
                                            <div key={group}>
                                              <div className="px-2 py-1.5 text-xs font-semibold bg-muted">
                                                {group}
                                              </div>
                                              {options.map((option) => (
                                                <SelectItem key={option.value} value={option.value}>
                                                  {option.label}
                                                </SelectItem>
                                              ))}
                                            </div>
                                          ))}
                                        </SelectContent>
                                      </Select>
                                      <FormMessage />
                                    </FormItem>
                                  )}
                                />
                              </div>
                              
                              <FormField
                                control={awakeningBonusForm.control}
                                name="value"
                                render={({ field }) => (
                                  <FormItem>
                                    <FormLabel>効果値</FormLabel>
                                    <FormControl>
                                      <Input 
                                        placeholder="+なしで数値のみ入力（例: 10）" 
                                        {...field} 
                                        onChange={(e) => {
                                          // 入力値からプラス記号を取り除く
                                          let value = e.target.value.replace(/^\+/, '');
                                          
                                          // 数値のみ受け付ける
                                          if (/^[0-9]*$/.test(value) || value === '') {
                                            field.onChange(value);
                                          }
                                        }}
                                      />
                                    </FormControl>
                                    <FormDescription>
                                      入力値は自動的に追加効果（+付き）として表示されます
                                    </FormDescription>
                                    <FormMessage />
                                  </FormItem>
                                )}
                              />
                              
                              <Button 
                                type="button" 
                                disabled={isAwakeningBonusSubmitting}
                                onClick={() => {
                                  const values = awakeningBonusForm.getValues();
                                  console.log("直接ボタンクリックによる送信:", values);
                                  onAwakeningBonusSubmit(values);
                                }}
                              >
                                {isAwakeningBonusSubmitting && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}
                                覚醒ボーナスを追加
                              </Button>
                            </form>
                          </Form>
                        </div>
                      </div>
                      
                      <div>
                        <h3 className="text-lg font-medium mb-4">登録済み覚醒ボーナス</h3>
                        
                        {isLoadingAwakeningBonuses ? (
                          <div className="flex justify-center my-8">
                            <Loader2 className="h-8 w-8 animate-spin text-muted-foreground" />
                          </div>
                        ) : (
                          <div className="space-y-2">
                            {awakeningBonuses.length === 0 ? (
                              <div className="text-center text-muted-foreground py-4">
                                登録された覚醒ボーナスはありません
                              </div>
                            ) : (
                              <div className="grid grid-cols-2 gap-2">
                                {awakeningBonuses.map((bonus) => (
                                  <div key={bonus.id} className="border p-2 rounded-lg flex justify-between items-center">
                                    <div>
                                      <div className="flex items-center space-x-2">
                                        <Badge variant="outline" className="text-xs">
                                          {bonus.awakeningType === "initial" ? "初回覚醒" : "二回目覚醒"}
                                        </Badge>
                                        <span className="font-medium">Lv.10まで開放時</span>
                                      </div>
                                      <div className="text-sm">
                                        {bonus.effectType}: {formatEffectValue(bonus.value, bonus.effectType, undefined, true)}
                                      </div>

                                    </div>
                                    <Button
                                      variant="ghost"
                                      size="sm"
                                      onClick={() => {
                                        if (window.confirm("このボーナスを削除しますか？")) {
                                          deleteAwakeningBonusMutation.mutate(bonus.id);
                                        }
                                      }}
                                      disabled={isAwakeningBonusDeleting}
                                    >
                                      {isAwakeningBonusDeleting ? (
                                        <Loader2 className="h-4 w-4 animate-spin" />
                                      ) : (
                                        <Trash className="h-4 w-4 text-destructive" />
                                      )}
                                    </Button>
                                  </div>
                                ))}
                              </div>
                            )}
                          </div>
                        )}
                      </div>
                    </div>
                  </TabsContent>
